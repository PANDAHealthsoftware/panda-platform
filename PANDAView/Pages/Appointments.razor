@page "/appointments"
@using PANDA.Shared.DTOs.Appointment
@using PANDAView.Models.Appointment
@using PANDAView.Services.Appointment
@using PANDAView.Services.Patient
@inject IAppointmentService AppointmentService
@inject NotificationService NotificationService
@inject DialogService DialogService

<ErrorBoundary>
    <ChildContent>
        @if (_ready)
        {
            @if (!_appointments.Any())
            {
                <p class="nhs-info">No appointments loaded</p>
            }
            else
            {
                <div class="nhs-appointments-header">
                    <h2 class="nhs-heading">Appointments</h2>
                    <button class="nhs-btn-primary" @onclick="OpenNewAppointmentDialog">+ New Appointment</button>
                </div>

                <RadzenScheduler TItem="AppointmentViewModel"
                                 Data="@_appointments"
                                 StartProperty="AppointmentDate"
                                 EndProperty="AppointmentEnd"
                                 TextProperty="DisplayLabel"
                                 Duration="30"
                                 View="SchedulerView.Day"
                                 SlotDuration="30"
                                 Date="@DateTime.Today"
                                 AppointmentMove="@OnAppointmentMove"
                                 AppointmentSelect="@OnAppointmentSelect"
                                 @ref="_scheduler"
                                 Style="height: 720px">
                    <RadzenDayView />
                    <RadzenWeekView />
                    <RadzenMonthView />
                </RadzenScheduler>
            }
        }
        else
        {
            <p class="nhs-loading">Loading appointments...</p>
        }
    </ChildContent>
    <ErrorContent>
        <p class="nhs-error">Sorry, something went wrong while loading the appointments. Please try again or contact support.</p>
    </ErrorContent>
</ErrorBoundary>

@code {
    private List<AppointmentViewModel> _appointments = new();
    private bool _ready;
    private RadzenScheduler<AppointmentViewModel> _scheduler = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadAppointments();
    }

    private async Task LoadAppointments()
    {
        try
        {
            var appointments = await AppointmentService.GetAppointmentsAsync();
            Console.WriteLine($"Loaded {appointments.Count()} appointments");
            if (appointments != null)
            {
                _appointments = appointments.Select(a => new AppointmentViewModel
                {
                    Id = a.Id,
                    PatientId = a.PatientId,
                    PatientName = a.PatientName,
                    AppointmentDate = a.AppointmentDate,
                    Status = a.Status,
                    Clinician = a.Clinician,
                    Department = a.Department,
                    ClinicianId = a.ClinicianId,
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading appointments: {ex}");
        }

        _ready = true;
    }

    private async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    {
        if (args.Appointment.Data is AppointmentViewModel appointment)
        {
            appointment.AppointmentDate = args.Appointment.Start;

            var updated = new UpdateAppointmentDto
            {
                Id = appointment.Id,
                PatientId = appointment.PatientId,
                PatientName = appointment.PatientName,
                AppointmentDate = appointment.AppointmentDate,
                Status = appointment.Status,
                Clinician = appointment.Clinician,
                ClinicianId = appointment.ClinicianId,
                Department = appointment.Department,
            };

            try
            {
                await AppointmentService.UpdateAppointmentAsync(updated);
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Appointment Moved",
                    Detail = $"New time: {appointment.AppointmentDate:t}",
                    Duration = 4000
                });
                await _scheduler.Reload();
            }
            catch (Exception ex)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Update Failed",
                    Detail = ex.Message,
                    Duration = 5000
                });
            }
        }
    }

    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<AppointmentViewModel> args)
    {
        var result = await DialogService.OpenAsync<EditAppointmentDialog>("Edit Appointment",
            new Dictionary<string, object> { { "Appointment", args.Data } });

        if (result is true)
        {
            await LoadAppointments();
            await _scheduler.Reload();
        }
    }

    private async Task OpenNewAppointmentDialog()
    {
        var result = await DialogService.OpenAsync<EditAppointmentDialog>("New Appointment",
            new Dictionary<string, object> { { "Appointment", new AppointmentViewModel
            {
                AppointmentDate = DateTime.Now,
                Status = AppointmentStatus.Scheduled,
                Department = Department.Cardiology //Set as a default? 
            } } });

        if (result is true)
        {
            await LoadAppointments();
            await _scheduler.Reload();
        }
    }
}
